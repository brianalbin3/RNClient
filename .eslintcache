[{"C:\\Users\\FamilyPC\\client\\src\\index.tsx":"1","C:\\Users\\FamilyPC\\client\\src\\theme.js":"2","C:\\Users\\FamilyPC\\client\\src\\contexts\\authContext.js":"3","C:\\Users\\FamilyPC\\client\\src\\App.tsx":"4","C:\\Users\\FamilyPC\\client\\src\\api\\auth.tsx":"5","C:\\Users\\FamilyPC\\client\\src\\components\\ContactSettings.tsx":"6","C:\\Users\\FamilyPC\\client\\src\\components\\Medicine.tsx":"7","C:\\Users\\FamilyPC\\client\\src\\components\\Alarms.tsx":"8","C:\\Users\\FamilyPC\\client\\src\\components\\Schedule.tsx":"9","C:\\Users\\FamilyPC\\client\\src\\components\\Main.tsx":"10","C:\\Users\\FamilyPC\\client\\src\\components\\AccountSettings.tsx":"11","C:\\Users\\FamilyPC\\client\\src\\components\\Splash.tsx":"12","C:\\Users\\FamilyPC\\client\\src\\components\\Register.tsx":"13","C:\\Users\\FamilyPC\\client\\src\\components\\PrivateRoute.tsx":"14","C:\\Users\\FamilyPC\\client\\src\\components\\Login.tsx":"15","C:\\Users\\FamilyPC\\client\\src\\components\\PasswordInput.tsx":"16","C:\\Users\\FamilyPC\\client\\src\\components\\Header.tsx":"17","C:\\Users\\FamilyPC\\client\\src\\api\\user.tsx":"18","C:\\Users\\FamilyPC\\client\\src\\components\\FindAccount.tsx":"19","C:\\Users\\FamilyPC\\client\\src\\components\\EnterCode.tsx":"20","C:\\Users\\FamilyPC\\client\\src\\components\\ResetPassword.tsx":"21","C:\\Users\\FamilyPC\\client\\src\\components\\PickResetMethod.tsx":"22","C:\\Users\\FamilyPC\\client\\src\\components\\MedicineList.tsx":"23","C:\\Users\\FamilyPC\\client\\src\\components\\MedicineListItem.tsx":"24","C:\\Users\\FamilyPC\\client\\src\\components\\AddMedicineDialog.tsx":"25","C:\\Users\\FamilyPC\\client\\src\\models\\Units.tsx":"26"},{"size":510,"mtime":1610936025058,"results":"27","hashOfConfig":"28"},{"size":388,"mtime":1607739491786,"results":"29","hashOfConfig":"28"},{"size":649,"mtime":1608760470093,"results":"30","hashOfConfig":"28"},{"size":1869,"mtime":1610936956735,"results":"31","hashOfConfig":"28"},{"size":642,"mtime":1610939553789,"results":"32","hashOfConfig":"28"},{"size":407,"mtime":1610937777653,"results":"33","hashOfConfig":"28"},{"size":2158,"mtime":1610939983764,"results":"34","hashOfConfig":"28"},{"size":330,"mtime":1610939231259,"results":"35","hashOfConfig":"28"},{"size":342,"mtime":1610936868537,"results":"36","hashOfConfig":"28"},{"size":533,"mtime":1610937503128,"results":"37","hashOfConfig":"28"},{"size":1183,"mtime":1610937379016,"results":"38","hashOfConfig":"28"},{"size":827,"mtime":1608440931949,"results":"39","hashOfConfig":"28"},{"size":6029,"mtime":1610937468259,"results":"40","hashOfConfig":"28"},{"size":874,"mtime":1610937585733,"results":"41","hashOfConfig":"28"},{"size":5803,"mtime":1610937556765,"results":"42","hashOfConfig":"28"},{"size":2151,"mtime":1611017652345,"results":"43","hashOfConfig":"28"},{"size":2727,"mtime":1610937625198,"results":"44","hashOfConfig":"28"},{"size":765,"mtime":1610939565951,"results":"45","hashOfConfig":"28"},{"size":4437,"mtime":1610936910696,"results":"46","hashOfConfig":"28"},{"size":8118,"mtime":1610937679226,"results":"47","hashOfConfig":"28"},{"size":6528,"mtime":1610937414761,"results":"48","hashOfConfig":"28"},{"size":6297,"mtime":1610936562302,"results":"49","hashOfConfig":"28"},{"size":764,"mtime":1610937651078,"results":"50","hashOfConfig":"28"},{"size":2478,"mtime":1610937811575,"results":"51","hashOfConfig":"28"},{"size":7719,"mtime":1611466641382,"results":"52","hashOfConfig":"28"},{"size":125,"mtime":1611461625576,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"187ra08",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"56"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"56"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\FamilyPC\\client\\src\\index.tsx",[],["117","118"],"C:\\Users\\FamilyPC\\client\\src\\theme.js",[],["119","120"],"C:\\Users\\FamilyPC\\client\\src\\contexts\\authContext.js",[],"C:\\Users\\FamilyPC\\client\\src\\App.tsx",[],"C:\\Users\\FamilyPC\\client\\src\\api\\auth.tsx",[],"C:\\Users\\FamilyPC\\client\\src\\components\\ContactSettings.tsx",["121"],"import React  from 'react';\r\n\r\ntype ContactSettingsState = {\r\n\r\n}\r\n\r\ntype ContactSettingsProps = {\r\n\r\n}\r\n\r\nclass ContactSettings extends React.Component<ContactSettingsProps, ContactSettingsState> {\r\n    constructor(props: ContactSettingsProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <h1>ContactSettings</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContactSettings;","C:\\Users\\FamilyPC\\client\\src\\components\\Medicine.tsx",[],"C:\\Users\\FamilyPC\\client\\src\\components\\Alarms.tsx",["122"],"import React  from 'react';\r\n\r\ntype AlarmsState = {\r\n  \r\n}\r\n\r\ntype AlarmsProps = {\r\n\r\n}\r\n\r\nclass Alarms extends React.Component<{}, AlarmsState> {\r\n    constructor(props: AlarmsProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <h1>Alarms</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Alarms;","C:\\Users\\FamilyPC\\client\\src\\components\\Schedule.tsx",["123"],"import React from 'react';\r\n\r\ntype ScheduleState = {}\r\n\r\ntype ScheduleProps = {}\r\n\r\nclass Schedule extends React.Component<ScheduleProps, ScheduleState> {\r\n    constructor(props: ScheduleProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <h1>Schedule</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Schedule;","C:\\Users\\FamilyPC\\client\\src\\components\\Main.tsx",[],"C:\\Users\\FamilyPC\\client\\src\\components\\AccountSettings.tsx",["124"],"import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nimport * as auth from '../api/auth';\r\n\r\n\r\nimport { AuthContextConsumer } from '../contexts/authContext';\r\n\r\ntype AccountSettingsState = {}\r\n\r\ntype AccountSettingsProps = {\r\n    history: any;\r\n}\r\n\r\nclass AccountSettings extends React.Component<AccountSettingsProps, AccountSettingsState> {\r\n    constructor(props: AccountSettingsProps) {\r\n        super(props);\r\n    }\r\n\r\n    handleSubmit(callback: any) {\r\n        try {\r\n            auth.logout();\r\n\r\n            callback();\r\n\r\n            this.props.history.push('/login');\r\n        }\r\n        catch(error) {\r\n            console.log('error',error)\r\n            \r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Account Settings</h1>\r\n\r\n                <AuthContextConsumer>\r\n                {context => (\r\n                    <Button onClick={ e => this.handleSubmit(context.logout)} className=\"auth-btn\" variant=\"contained\" color=\"primary\" size=\"medium\">Logout</Button>\r\n                )}\r\n                </AuthContextConsumer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AccountSettings;","C:\\Users\\FamilyPC\\client\\src\\components\\Splash.tsx",[],"C:\\Users\\FamilyPC\\client\\src\\components\\Register.tsx",[],"C:\\Users\\FamilyPC\\client\\src\\components\\PrivateRoute.tsx",[],"C:\\Users\\FamilyPC\\client\\src\\components\\Login.tsx",[],"C:\\Users\\FamilyPC\\client\\src\\components\\PasswordInput.tsx",["125"],"import { InputAdornment } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\r\nimport React, {Component } from 'react';\r\n\r\nimport './PasswordInput.css';\r\n\r\ntype PasswordInputState = {\r\n    passwordIsMasked: boolean\r\n}\r\n\r\n//https://itnext.io/building-a-toggled-mask-password-input-component-w-react-and-material-ui-f55e6bd73434\r\n\r\n\r\ntype PasswordInputProps = {\r\n    classes?: any,\r\n    onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    value?: string,\r\n    error?: boolean,\r\n    helperText?: string,\r\n    label?: string,\r\n    className?: string,\r\n    inputProps?: object,\r\n}\r\n\r\nclass PasswordInput extends Component<PasswordInputProps, PasswordInputState> {\r\n    constructor(props: PasswordInputProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            passwordIsMasked: true\r\n        };\r\n    }\r\n\r\n    togglePasswordMask = () => {\r\n        this.setState(prevState => ({\r\n            passwordIsMasked: !prevState.passwordIsMasked\r\n        }));\r\n    }\r\n\r\n    getVisibilityIcon() {\r\n        if ( this.state.passwordIsMasked ) {\r\n            return (\r\n                <VisibilityIcon color=\"primary\" onClick={this.togglePasswordMask} className=\"clickable-icon\"/>\r\n            );\r\n        }\r\n        \r\n        return (\r\n            <VisibilityOffIcon color=\"primary\" onClick={this.togglePasswordMask} className=\"clickable-icon\"/>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        const { passwordIsMasked } = this.state;\r\n\r\n        return (\r\n            <TextField\r\n                variant=\"filled\"\r\n                type={passwordIsMasked ? 'password' : 'text'}\r\n                {...this.props}\r\n                InputProps={{\r\n                    endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                            {this.getVisibilityIcon()}\r\n                        </InputAdornment>\r\n                    ),\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default PasswordInput;","C:\\Users\\FamilyPC\\client\\src\\components\\Header.tsx",[],"C:\\Users\\FamilyPC\\client\\src\\api\\user.tsx",[],"C:\\Users\\FamilyPC\\client\\src\\components\\FindAccount.tsx",[],"C:\\Users\\FamilyPC\\client\\src\\components\\EnterCode.tsx",["126","127"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\n\r\n\r\nimport qs from 'qs';\r\n\r\nimport * as userAPI from '../api/user';\r\n\r\nimport './EnterCode.css';\r\n\r\nenum EnterCodeStatusType {\r\n    NONE,\r\n    INVALID_PASSCODE,\r\n    CODE_EXPIRED,\r\n    TOO_MANY_ATTEMPTS,\r\n    INTERNAL_SERVER_ERROR,\r\n    RESENT_CODE\r\n}\r\n\r\ntype EnterCodeState = {\r\n    selectedContactMethod: string,\r\n    email: string,\r\n    phone: string,\r\n    submitIsTouched: boolean,\r\n    code: string,\r\n    enterCodeStatusType: EnterCodeStatusType\r\n}\r\n\r\ntype EnterCodeProps = {\r\n    location: any, // TODO: type\r\n    history: any, // TODO: type\r\n}\r\n\r\n\r\nclass EnterCode extends React.Component<EnterCodeProps, EnterCodeState> {\r\n\r\n    constructor(props: EnterCodeProps) {\r\n        super(props);\r\n\r\n        let selectedContactMethod: any = '';\r\n        let email: any = '';\r\n        let phone: any = '';\r\n\r\n        let qsParse: qs.ParsedQs = qs.parse(this.props.location.search, { ignoreQueryPrefix: true });\r\n\r\n        if ( qsParse ) {\r\n            selectedContactMethod = qsParse.selectedContactMethod;\r\n            email = qsParse.email; // Need email either way for back button\r\n            \r\n            if ( selectedContactMethod === 'phone' ) {\r\n                phone = qsParse.phone;\r\n            }\r\n        }\r\n\r\n        this.state = { selectedContactMethod, email, phone, submitIsTouched: false, code: '', enterCodeStatusType: EnterCodeStatusType.NONE };\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleCodeChange = this.handleCodeChange.bind(this);\r\n        this.resendCodeClicked = this.resendCodeClicked.bind(this);\r\n    }\r\n\r\n    handleCodeChange(e: any) {\r\n        const code: string = e.target.value;\r\n        this.setState({code});\r\n    }\r\n\r\n    getCodeHelperText(): string {\r\n        if ( this.displayCodeTextFieldError() ) {\r\n            return 'Code must be 8 digits';\r\n        }\r\n\r\n        const { selectedContactMethod} = this.state;\r\n        \r\n        return `Enter the 8 digit code sent to your ${selectedContactMethod}.`;\r\n    }\r\n\r\n    codeIsValid(): boolean {\r\n        return this.state.code.length === 8;\r\n    }\r\n\r\n    displayCodeTextFieldError(): boolean {\r\n        const { submitIsTouched, code } = this.state;\r\n\r\n        if ( !submitIsTouched ) {\r\n            return false\r\n        }\r\n\r\n        return !this.codeIsValid();\r\n    }\r\n      \r\n    async handleSubmit(e: any) {\r\n        this.setState({submitIsTouched: true});\r\n\r\n        if ( !this.codeIsValid() ) {\r\n            return;\r\n        }\r\n        \r\n        const { email, code, selectedContactMethod, phone } = this.state;\r\n\r\n        try {\r\n\r\n            await userAPI.checkResetCode(email, code);\r\n\r\n            this.setState({enterCodeStatusType: EnterCodeStatusType.NONE});\r\n\r\n            // TODO: should I just do history.back or something\r\n            if (selectedContactMethod === 'email') {\r\n                this.props.history.push(`/resetpassword?email=${email}&code=${code}`);\r\n            }\r\n            else {\r\n                this.props.history.push(`/resetpassword?email=${email}&code=${code}`);\r\n            }\r\n        }\r\n        catch(error) {\r\n            console.error(\"error\",error)\r\n\r\n            if ( error.response.status === 401 ) {\r\n                if ( error.response.data.message === 'Invalid email/passcode combination') {\r\n                    this.setState({enterCodeStatusType: EnterCodeStatusType.INVALID_PASSCODE});\r\n                }\r\n                else if ( error.response.data.message === 'Reset code has expired' ) {\r\n                    this.setState({enterCodeStatusType: EnterCodeStatusType.CODE_EXPIRED});\r\n                }\r\n                else if ( error.response.data.message === 'Too many failed attempts' ) {\r\n                    this.setState({enterCodeStatusType: EnterCodeStatusType.TOO_MANY_ATTEMPTS});\r\n                }\r\n            }\r\n            else { //500, 'The server encountered an unknown error.', 400, Email and/or resetCode not sent (shouldn't ever happen)\r\n                this.setState({enterCodeStatusType: EnterCodeStatusType.INTERNAL_SERVER_ERROR});\r\n            }\r\n        }\r\n    }\r\n\r\n    displayFormHelperText(): boolean {\r\n        return this.state.enterCodeStatusType !== EnterCodeStatusType.NONE;\r\n    }\r\n\r\n    getFormHelperText(): string {\r\n        const { enterCodeStatusType, selectedContactMethod, email, phone } = this.state;\r\n\r\n        if ( enterCodeStatusType === EnterCodeStatusType.INVALID_PASSCODE ) {\r\n            return 'Wrong code, try again.';\r\n        }\r\n        else if ( enterCodeStatusType === EnterCodeStatusType.CODE_EXPIRED ) {\r\n            return 'This code has expired.';\r\n        }\r\n        else if ( enterCodeStatusType === EnterCodeStatusType.TOO_MANY_ATTEMPTS ) {\r\n            return 'Too many failed attempts.';\r\n        }\r\n        else if ( enterCodeStatusType === EnterCodeStatusType.INTERNAL_SERVER_ERROR ) {\r\n            return 'Internal server error. Please refresh the page and try again.';\r\n        }\r\n        else if ( enterCodeStatusType === EnterCodeStatusType.RESENT_CODE) {\r\n            return `Another code has been sent to ${selectedContactMethod === 'email' ? email : phone}`;\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    formHelperTextIsError(): boolean {\r\n        return this.state.enterCodeStatusType !== EnterCodeStatusType.RESENT_CODE;\r\n    }\r\n\r\n    displayResendCodeLink(): boolean {\r\n        const enterCodeStatusType: EnterCodeStatusType = this.state.enterCodeStatusType;\r\n\r\n        return  enterCodeStatusType === EnterCodeStatusType.TOO_MANY_ATTEMPTS || enterCodeStatusType === EnterCodeStatusType.CODE_EXPIRED;\r\n    }\r\n\r\n    async resendCodeClicked(e: any) { // TODO: Type\r\n        const { email, selectedContactMethod } = this.state;\r\n\r\n        try {\r\n            await userAPI.sendResetCode(email, selectedContactMethod);\r\n\r\n            this.setState({enterCodeStatusType: EnterCodeStatusType.RESENT_CODE});   \r\n        }\r\n        catch (error) {\r\n            this.setState({ enterCodeStatusType: EnterCodeStatusType.INTERNAL_SERVER_ERROR });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { selectedContactMethod, phone, email } = this.state;\r\n        const contactDetail = selectedContactMethod === 'email' ? email : phone;\r\n        return (\r\n            <div className=\"auth-page-container\">\r\n                <div className=\"auth-page\">\r\n                    <Typography className=\"auth-header\" color=\"primary\" variant=\"h4\">Enter Security Code</Typography>\r\n                    <form className=\"auth-form\">\r\n                        <div className=\"auth-instructions desktop-only\">Please check your {selectedContactMethod} for the 8 digit code that was sent to {contactDetail}.</div>\r\n                        <TextField onChange={this.handleCodeChange} className=\"auth-txt-field\" label=\"########\" variant=\"filled\" helperText={this.getCodeHelperText()} error={this.displayCodeTextFieldError()}/>\r\n                        <Button onClick={ this.handleSubmit } className=\"auth-btn\" variant=\"contained\" color=\"primary\" size=\"medium\">Enter Code</Button>\r\n                        <FormHelperText className={`auth-err ${this.displayFormHelperText() ? \"\" : \"display-none\"}`} error={this.formHelperTextIsError()}>{this.getFormHelperText()}<span className={`resend-code ${this.displayResendCodeLink() ? \"\" : \"display-none\"}`} onClick={this.resendCodeClicked}>Resend Code?</span></FormHelperText>\r\n                    </form>\r\n                    <div className=\"non-important-btns-container\">\r\n                        <Link className=\"no-underline\" to={`/pickresetmethod?email=${email}&phone=${phone}`}>\r\n                            <Button className=\"enter-code-btn non-important-btn\" color=\"primary\">Try Another Way</Button>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EnterCode;","C:\\Users\\FamilyPC\\client\\src\\components\\ResetPassword.tsx",[],"C:\\Users\\FamilyPC\\client\\src\\components\\PickResetMethod.tsx",[],"C:\\Users\\FamilyPC\\client\\src\\components\\MedicineList.tsx",["128"],"import React from 'react';\r\n\r\nimport MedicineListItem from './MedicineListItem';\r\n\r\nimport './MedicineList.css';\r\n\r\ntype MedicineListState = {\r\n\r\n}\r\n\r\ntype MedicineListProps = {\r\n    medicineList: Array<string>\r\n}\r\n\r\nclass MedicineList extends React.Component<MedicineListProps, MedicineListState> {\r\n    constructor(props: MedicineListProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n\r\n        let medListItems = [];\r\n\r\n        for (let i = 0; i < this.props.medicineList.length; i++) {\r\n            medListItems.push(<MedicineListItem medicine={this.props.medicineList[i]}/>);\r\n        }\r\n\r\n        return (\r\n            <div className=\"med-list\">\r\n                {medListItems}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MedicineList;","C:\\Users\\FamilyPC\\client\\src\\components\\MedicineListItem.tsx",["129"],"import React from 'react';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport './MedicineListItem.css';\r\n\r\ntype MedicineListItemState = {\r\n\r\n}\r\n\r\ntype MedicineListItemProps = {\r\n    medicine: string\r\n}\r\n\r\n\r\n\r\nfunction MedicineListItem(props: MedicineListItemProps) {\r\n    return (\r\n        <div className=\"med-list-item\">\r\n            <div>\r\n                <div className=\"med-name-txt\">{props.medicine}</div>\r\n            </div>\r\n            <div className=\"med-btns-container\">\r\n                <div className=\"med-icon-btn-container\">\r\n                    <IconButton className=\"med-icon-btn\" color=\"primary\" aria-label=\"add an alarm\">\r\n                        <DeleteIcon className=\"med-icon\" color=\"primary\" />\r\n                    </IconButton>\r\n                </div>\r\n                <div className=\"med-icon-btn-container\">\r\n                    <IconButton className=\"med-icon-btn\" color=\"primary\" aria-label=\"add an alarm\">\r\n                        <EditIcon className=\"med-icon\" color=\"primary\" />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n// class MedicineListItem extends React.Component<MedicineListItemProps, MedicineListItemState> {\r\n//     constructor(props: MedicineListItemProps) {\r\n//         super(props);\r\n//     }\r\n\r\n//     render() {\r\n//         return (\r\n//             <div className=\"med-list-item\">\r\n//                 <div>\r\n//                     <div className=\"med-name-txt\">{this.props.medicine}</div>\r\n//                 </div>\r\n//                 <div className=\"med-btns-container\">\r\n//                     <div className=\"med-icon-btn-container\">\r\n//                         <IconButton className=\"med-icon-btn\" color=\"primary\" aria-label=\"add an alarm\">\r\n//                             <DeleteIcon className=\"med-icon\" color=\"primary\" />\r\n//                         </IconButton>\r\n//                     </div>\r\n//                     <div className=\"med-icon-btn-container\">\r\n//                         <IconButton className=\"med-icon-btn\" color=\"primary\" aria-label=\"add an alarm\">\r\n//                             <EditIcon className=\"med-icon\" color=\"primary\" />\r\n//                         </IconButton>\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n\r\n//         );\r\n//     }\r\n// }\r\n\r\nexport default MedicineListItem;","C:\\Users\\FamilyPC\\client\\src\\components\\AddMedicineDialog.tsx",["130","131"],"import React from 'react';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\n//import Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport LuxonUtils from '@date-io/luxon';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport Medicine from '../models/Medicine';\r\nimport Units from '../models/Units';\r\n\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  TimePicker,\r\n  DatePicker\r\n} from '@material-ui/pickers';\r\n\r\nimport AccessAlarmIcon from '@material-ui/icons/AccessAlarm';\r\nimport EventIcon from '@material-ui/icons/Event';\r\n\r\nimport { InputAdornment } from '@material-ui/core';\r\n\r\nimport './AddMedicineDialog.css';\r\n\r\ntype AddMedicineDialogState = {\r\n    medicine: Medicine | null,\r\n    ammount: number,\r\n    units: Units | null,\r\n    time: Date | null\r\n    startDate: Date | null;\r\n    endDate: Date | null;\r\n}\r\n\r\n\r\ntype AddMedicineDialogProps = {}\r\n\r\nclass AddMedicineDialog extends React.Component<AddMedicineDialogProps, AddMedicineDialogState> {\r\n\r\n    medicineList: Array<Medicine> = [\r\n        {\r\n            id: '123',\r\n            name: 'Tylenol'\r\n        },\r\n        {\r\n            id: '234',\r\n            name: 'Advil'\r\n        }\r\n    ]\r\n\r\n    constructor(props: AddMedicineDialogProps) {\r\n        super(props);\r\n\r\n        this.state = { medicine: this.medicineList[0], ammount: 0, units: Units.MG, time: null, startDate: null, endDate: null }\r\n\r\n        this.handleMedicineChange = this.handleMedicineChange.bind(this);\r\n        this.handleMedicineAmmountChange = this.handleMedicineAmmountChange.bind(this);\r\n        this.handleMedicineUnitsChange = this.handleMedicineUnitsChange.bind(this);\r\n        this.handleTimeChange = this.handleTimeChange.bind(this);\r\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\r\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\r\n    }\r\n\r\n    handleMedicineChange() {}\r\n\r\n    handleMedicineAmmountChange(e: any) {\r\n        const ammount: number = Number(e.target.value);\r\n        this.setState({ammount});\r\n    }\r\n    \r\n    handleMedicineUnitsChange() {}\r\n    \r\n    handleTimeChange(time: Date | null) {\r\n        this.setState({time});\r\n    }\r\n\r\n    handleStartDateChange(date: Date | null) {\r\n        this.setState({startDate: date});\r\n    }\r\n\r\n    handleEndDateChange(date: Date | null) {\r\n        this.setState({endDate: date});\r\n    }\r\n\r\n    handleSubmit(e: any) {\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { time, startDate, endDate } = this.state;\r\n\r\n        // TODO: Async autocomplete for medicine name\r\n        //https://codesandbox.io/s/wj0r6?file=/demo.tsx\r\n\r\n        return (\r\n            <div className=\"grayout\">\r\n                <div className=\"add-medicine-dialog\">\r\n                    <div className=\"dialog-header\">\r\n                        <Typography className=\"dialog-title\" variant=\"h4\">Add Medicine</Typography>\r\n                    </div>\r\n                    <div className=\"dialog-body\">\r\n                        <div className=\"dialog-form\">\r\n                            <TextField onChange={this.handleMedicineChange} className=\"dialog-txt-field\" label=\"Medicine Name\" variant=\"filled\" error={false} helperText=\"Enter the medicine name\" />\r\n                            <div className=\"medicine-amt-container\">\r\n                                <TextField type=\"number\" InputProps={{ inputProps: { min: 0, max: 9999 } }} onChange={this.handleMedicineAmmountChange} className=\"medicine-amt\" label=\"Medicine Ammount\" variant=\"filled\" error={false} helperText=\"Enter the medcine ammount\" />\r\n                                <TextField onChange={this.handleMedicineUnitsChange} className=\"medicine-units\" label=\"Units\" variant=\"filled\" error={false}/>\r\n                            </div>\r\n                            <TextField className=\"dialog-txt-field\" label=\"Frequency\" variant=\"filled\" error={false} helperText=\"How often do you take this medicine?\" />\r\n                            \r\n                            <MuiPickersUtilsProvider utils={LuxonUtils}>\r\n                                <TimePicker\r\n                                    className=\"dialog-picker-field\"\r\n                                    inputVariant=\"filled\"\r\n                                    format=\"h:mm a\"\r\n                                    value={time}\r\n                                    margin=\"normal\"\r\n                                    label=\"Time\"\r\n                                    onChange={this.handleTimeChange}\r\n                                    helperText=\"What time do you take this medicine?\"\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <AccessAlarmIcon color=\"primary\"/>\r\n                                        </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                />\r\n\r\n                                <DatePicker\r\n                                    className=\"dialog-picker-field\"\r\n                                    inputVariant=\"filled\"\r\n                                    format=\"MM/dd/yyyy\"\r\n                                    value={startDate}\r\n                                    margin=\"normal\"\r\n                                    label=\"Start Date\"\r\n                                    onChange={this.handleStartDateChange}\r\n                                    helperText=\"What's the first day you take this medicine?\"\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <EventIcon color=\"primary\"/>\r\n                                        </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                />\r\n\r\n                                <DatePicker\r\n                                    className=\"dialog-picker-field\"\r\n                                    inputVariant=\"filled\"\r\n                                    format=\"MM/dd/yyyy\"\r\n                                    value={endDate}\r\n                                    margin=\"normal\"\r\n                                    label=\"End Date\"\r\n                                    onChange={this.handleEndDateChange}\r\n                                    helperText=\"What's the last day you take this medicine?\"\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <EventIcon color=\"primary\"/>\r\n                                        </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                />\r\n\r\n                            </MuiPickersUtilsProvider>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"dialog-actions\">\r\n                        <Button color=\"primary\" className=\"dialog-btn\" onClick={ () => {} } variant=\"contained\" size=\"medium\">Cancel</Button>\r\n                        <Button color=\"primary\" className=\"dialog-btn\" onClick={ this.handleSubmit } variant=\"contained\" size=\"medium\">Add</Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddMedicineDialog;","C:\\Users\\FamilyPC\\client\\src\\models\\Units.tsx",[],{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","severity":1,"message":"137","line":12,"column":5,"nodeType":"138","messageId":"139","endLine":14,"endColumn":6},{"ruleId":"136","severity":1,"message":"137","line":12,"column":5,"nodeType":"138","messageId":"139","endLine":14,"endColumn":6},{"ruleId":"136","severity":1,"message":"137","line":8,"column":5,"nodeType":"138","messageId":"139","endLine":10,"endColumn":6},{"ruleId":"136","severity":1,"message":"137","line":17,"column":5,"nodeType":"138","messageId":"139","endLine":19,"endColumn":6},{"ruleId":"140","severity":1,"message":"141","line":55,"column":17,"nodeType":"142","messageId":"143","endLine":55,"endColumn":24},{"ruleId":"140","severity":1,"message":"144","line":87,"column":34,"nodeType":"142","messageId":"143","endLine":87,"endColumn":38},{"ruleId":"140","severity":1,"message":"145","line":103,"column":53,"nodeType":"142","messageId":"143","endLine":103,"endColumn":58},{"ruleId":"136","severity":1,"message":"137","line":16,"column":5,"nodeType":"138","messageId":"139","endLine":18,"endColumn":6},{"ruleId":"140","severity":1,"message":"146","line":7,"column":6,"nodeType":"142","messageId":"143","endLine":7,"endColumn":27},{"ruleId":"140","severity":1,"message":"147","line":8,"column":8,"nodeType":"142","messageId":"143","endLine":8,"endColumn":14},{"ruleId":"140","severity":1,"message":"148","line":9,"column":8,"nodeType":"142","messageId":"143","endLine":9,"endColumn":16},"no-native-reassign",["149"],"no-negated-in-lhs",["150"],"@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","@typescript-eslint/no-unused-vars","'classes' is assigned a value but never used.","Identifier","unusedVar","'code' is assigned a value but never used.","'phone' is assigned a value but never used.","'MedicineListItemState' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","no-global-assign","no-unsafe-negation"]